Is this a good use of Object Oriented design? Why or why not?
  OO design is always a good idea, but this is a particulary good example because it helps modularize the program.
  This can be applied for other uses, and encapsulates a single job, that it does well.

There are different possible desired behaviors for what happens when the Process object goes out of scope:

        The Process object waits until the child process has finished on its own (this has the effect of stalling the main program at the point at which the process object goes out of scope).

        The Process object waits for a specified time period for the child to finish on its own and then sends a TERM or KILL signal.

        The Process object sends a TERM or KILL signal imediately if the child process has not already finished at the time the Process destructor is called (when the object goes out of scope)

        ...

How might you modify your Process class to allow the programmer an easy way to use different destruction policies?
  We could make an option that we pass into the deconstructor that specifies which process to use. This would allow 
  general freedom on the issue.

How might you handle the case when a child process terminates before the parent process destroies it? I.e. how might the parent be signaled when a child terminates, and then read in any data it has written to its output.
  

